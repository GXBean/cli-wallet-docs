                          variant_object about()
                                    void add_operation_to_builder_transaction(transaction_handle_type transaction_handle, const operation & op)
                      signed_transaction approve_proposal(const string & fee_paying_account, const string & proposal_id, const approval_delta & delta, bool broadcast)
                 transaction_handle_type begin_builder_transaction()
                   vector<blind_receipt> blind_history(string key_or_account)
                      blind_confirmation blind_transfer(string from_key_or_label, string to_key_or_label, string amount, string symbol, bool broadcast)
pair<transaction_id_type, signed_transaction> broadcast_transaction(signed_transaction tx)
                      signed_transaction call_contract(string account, string contract, optional<asset> amount, string method, string arg, string fee_asset_symbol, bool broadcast)
                      signed_transaction create_account_with_brain_key(string brain_key, string account_name, string registrar_account, string referrer_account, bool broadcast)
                      signed_transaction create_asset(string issuer, string symbol, uint8_t precision, asset_options common, string fee_asset_symbol, bool broadcast)
                      signed_transaction create_committee_member(string owner_account, string url, bool broadcast)
                      signed_transaction create_data_market_category(string category_name, uint8_t data_market_type, uint32_t order_num, string issuer, bool broadcast)
                      signed_transaction create_free_data_product(string product_name, string brief_desc, string datasource_account, string category_id, double price, string icon, vector<schema_context_object> schema_contexts, string parent_id, string issuer, bool recommend, bool broadcast)
                      signed_transaction create_league(string league_name, string brief_desc, vector<account_id_type> members, vector<league_data_product_id_type> data_products, vector<uint64_t> prices, string category_id, string icon, string issuer, vector<uint64_t> pocs_thresholds, vector<uint64_t> fee_bases, vector<uint64_t> pocs_weights, bool recommend, bool broadcast)
                      signed_transaction create_league_data_product(string product_name, string brief_desc, string category_id, double refer_price, string icon, vector<schema_context_object> schema_contexts, string issuer, uint64_t pocs_threshold, bool broadcast)
                      signed_transaction create_witness(string owner_account, string url, string fee_asset_symbol, bool broadcast)
                      signed_transaction custom(string account, uint16_t id, string data, string fee_symbol, bool broadcast)
                      signed_transaction data_transaction_complain_datasource(string request_id, account_id_type requester, account_id_type datasource, string merchant_copyright_hash, string datasource_copyright_hash, bool broadcast)
                      signed_transaction data_transaction_create(string request_id, object_id_type product_id, fc::optional<league_id_type> league_id, string version, string params, string requester, bool broadcast)
                      signed_transaction data_transaction_datasource_upload(string request_id, string requester, string datasource, fc::optional<string> copyright_hash, bool broadcast)
                      signed_transaction data_transaction_datasource_validate_error(string request_id, string datasource, bool broadcast)
                      signed_transaction data_transaction_update(string request_id, uint8_t new_status, string new_requester, fc::optional<string> memo, bool broadcast)
                                    void dbg_generate_blocks(std::string debug_wif_key, uint32_t count)
                                    void dbg_make_uia(string creator, string symbol)
                                    void dbg_push_blocks(std::string src_filename, uint32_t count)
                                    void dbg_stream_json_objects(const std::string & filename)
                                    void dbg_update_object(fc::variant_object update)
                      signed_transaction deploy_contract(string name, string account, string vm_type, string vm_version, string contract_dir, string fee_asset_symbol, bool broadcast)
                  vector<brain_key_info> derive_owner_keys_from_brain_key(string brain_key, int number_of_desired_keys)
            map<public_key_type, string> dump_private_keys()
                                    void flood_create_account(string account_prefix, uint32_t number_of_accounts)
                                    void flood_network(string account_prefix, uint32_t number_of_transactions)
                                    void flood_transfer(string from_account, string account_prefix, uint32_t number_of_accounts, uint32_t number_of_loop)
                      signed_transaction fund_asset_fee_pool(string from, string symbol, string amount, bool broadcast)
                          account_object get_account(string account_name_or_id)
                                uint64_t get_account_count()
                vector<operation_detail> get_account_history(string name, int limit)
        account_history_operation_detail get_account_history_by_operations(string account_name_or_id, vector<uint32_t> operation_indexs, uint32_t start, int limit)
                         account_id_type get_account_id(string account_name_or_id)
                            asset_object get_asset(string asset_name_or_id)
                                uint64_t get_asset_count()
        optional<signed_block_with_info> get_block(uint32_t num)
        optional<signed_block_with_info> get_block_by_id(block_id_type block_id)
   data_transaction_commission_percent_t get_commission_percent()
                 committee_member_object get_committee_member(string owner_account)
                                 variant get_contract_tables(string contract)
             data_market_category_object get_data_market_category(string category_id)
       optional<data_transaction_object> get_data_transaction_by_request_id(string request_id)
                                uint64_t get_data_transaction_commission(fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_pay_fee(fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_pay_fees_by_requester(string requester, fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_product_costs(fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_product_costs_by_product_id(string product_id, fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_product_costs_by_requester(string requester, fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_total_count(fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_total_count_by_product_id(string product_id, fc::time_point_sec start, fc::time_point_sec end)
                                uint64_t get_data_transaction_total_count_by_requester(string requester, fc::time_point_sec start, fc::time_point_sec end)
          dynamic_global_property_object get_dynamic_global_properties()
                free_data_product_object get_free_data_product(string product_id)
                  global_property_object get_global_properties()
                              fc::sha256 get_hash(const string & value)
     irreversible_account_history_detail get_irreversible_account_history(string name, vector<uint32_t> operation_types, uint32_t start, int limit)
                           league_object get_league(string league_id)
              league_data_product_object get_league_data_product(string product_id)
                                uint64_t get_merchants_total_count()
                                 variant get_object(object_id_type id)
                   optional<pocs_object> get_pocs_object(league_id_type league_id, string account, object_id_type product_id)
                                  string get_private_key(public_key_type pubkey)
                               operation get_prototype_operation(string operation_type)
                vector<operation_detail> get_relative_account_history(string name, uint32_t stop, int limit, uint32_t start)
                                 variant get_table_objects(string contract, string table)
                                    void get_tps()
                     transaction_id_type get_transaction_id(const signed_transaction & trx)
vector<vesting_balance_object_with_info> get_vesting_balances(string account_name)
                          witness_object get_witness(string owner_account)
                                  string gethelp(const string & method)
                                  string help()
                                    bool import_account_keys(string filename, string password, string src_account_name, string dest_account_name)
                       map<string, bool> import_accounts(string filename, string password)
              vector<signed_transaction> import_balance(string account_name_or_id, const vector<string> & wif_keys, bool broadcast)
                                    bool import_key(string account_name_or_id, string wif_key)
                                 variant info()
                                    bool is_account_registered(string name)
                                    bool is_locked()
                                    bool is_new()
                                    bool is_public_key_registered(string public_key)
                      signed_transaction issue_asset(string to_account, string amount, string symbol, string memo, string fee_asset_symbol, bool broadcast)
                           vector<asset> list_account_balances(const string & id)
                           vector<asset> list_account_lock_balances(const string & account_id_or_name)
            map<string, account_id_type> list_accounts(const string & lowerbound, uint32_t limit)
                    vector<asset_object> list_assets(const string & lowerbound, uint32_t limit)
   map<string, committee_member_id_type> list_committee_members(const string & lowerbound, uint32_t limit)
     vector<data_market_category_object> list_data_market_categories(uint32_t market_type)
          map<account_id_type, uint64_t> list_data_transaction_complain_datasources(fc::time_point_sec start_date_time, fc::time_point_sec end_date_time, uint8_t limit)
          map<account_id_type, uint64_t> list_data_transaction_complain_requesters(fc::time_point_sec start_date_time, fc::time_point_sec end_date_time, uint8_t limit)
  data_transaction_search_results_object list_data_transactions_by_requester(string requester, uint32_t limit)
 free_data_product_search_results_object list_free_data_products(string data_market_category_id, uint32_t offset, uint32_t limit, string order_by, string keyword, bool show_all)
league_data_product_search_results_object list_league_data_products(string data_market_category_id, uint32_t offset, uint32_t limit, string order_by, string keyword, bool show_all)
            league_search_results_object list_leagues(string data_market_category_id, uint32_t offset, uint32_t limit, string order_by, string keyword, bool show_all)
                  vector<account_object> list_my_accounts()
          map<account_id_type, uint64_t> list_second_hand_datasources(time_point_sec start_date_time, time_point_sec end_date_time, uint32_t limit)
                                uint32_t list_total_second_hand_transaction_counts_by_datasource(fc::time_point_sec start_date_time, fc::time_point_sec end_date_time, const string & datasource_account)
            map<string, witness_id_type> list_witnesses(const string & lowerbound, uint32_t limit)
                                    bool load_wallet_file(string wallet_filename)
                                    void lock()
                                    void network_add_nodes(const vector<string> & nodes)
                         vector<variant> network_get_connected_peers()
                                  string normalize_brain_key(string s)
                      signed_transaction pay_data_transaction(string from, string to, asset amount, string request_id, bool broadcast)
                             transaction preview_builder_transaction(transaction_handle_type handle)
                      signed_transaction propose_builder_transaction(transaction_handle_type handle, time_point_sec expiration, uint32_t review_period_seconds, bool broadcast)
                      signed_transaction propose_builder_transaction2(transaction_handle_type handle, string account_name_or_id, time_point_sec expiration, uint32_t review_period_seconds, bool broadcast)
                      signed_transaction propose_data_market_category_update(const string & proposing_account, string category_id, string new_category_name, uint32_t new_order_num, uint8_t new_status, bool broadcast)
                      signed_transaction propose_deprecate_datasource(string propose_account, string datasource_account, bool broadcast)
                      signed_transaction propose_deprecate_merchant(string propose_account, string merchant_account, bool broadcast)
                      signed_transaction propose_fee_change(const string & proposing_account, fc::time_point_sec expiration_time, const variant_object & changed_values, bool broadcast)
                      signed_transaction propose_free_data_product_update(const string & proposing_account, string free_data_product_id, string new_product_name, string new_brief_desc, string new_datasource_account, string new_category_id, double new_price, string new_icon, vector<schema_context_object> new_schema_contexts, string new_parent_id, uint8_t new_status, bool new_recommend, bool broadcast)
                      signed_transaction propose_gpo_extensions_change(const string & proposing_account, fc::time_point_sec expiration_time, const variant_object & changed_extensions, bool broadcast)
                      signed_transaction propose_league_data_product_update(const string & proposing_account, string league_data_product, string new_product_name, string new_brief_desc, string new_category_id, double new_refer_price, string new_icon, vector<schema_context_object> new_schema_contexts, uint8_t new_status, uint64_t new_pocs_threshold, bool broadcast)
                      signed_transaction propose_league_update(const string & proposing_account, string league_id, string new_league_name, string new_brief_desc, vector<account_id_type> new_members, vector<league_data_product_id_type> new_data_products, vector<uint64_t> new_prices, string new_category_id, string new_icon, uint8_t new_status, vector<uint64_t> new_pocs_thresholds, vector<uint64_t> new_fee_bases, vector<uint64_t> new_pocs_weights, bool new_recommend, bool broadcast)
                      signed_transaction propose_parameter_change(const string & proposing_account, fc::time_point_sec expiration_time, const variant_object & changed_values, bool broadcast)
                                  string read_memo(const memo_data & memo)
                           blind_receipt receive_blind_transfer(string confirmation_receipt, string opt_from, string opt_memo)
                      signed_transaction register_account(string name, public_key_type owner, public_key_type active, string registrar_account, string referrer_account, uint32_t referrer_percent, bool broadcast)
                      signed_transaction register_account2(string name, public_key_type owner, public_key_type active, public_key_type memo, string registrar_account, string referrer_account, uint32_t referrer_percent, string fee_asset_symbol, bool broadcast)
                                    void remove_builder_transaction(transaction_handle_type handle)
                                    void replace_operation_in_builder_transaction(transaction_handle_type handle, unsigned operation_index, const operation & new_op)
                      signed_transaction reserve_asset(string from, string amount, string symbol, string fee_asset_symbol, bool broadcast)
                                    void save_wallet_file(string wallet_filename)
                                  string serialize_proxy_transfer_params(proxy_transfer_params param)
                                  string serialize_transaction(signed_transaction tx)
                      signed_transaction set_desired_witness_and_committee_member_count(string account_to_modify, uint16_t desired_number_of_witnesses, uint16_t desired_number_of_committee_members, bool broadcast)
                                   asset set_fees_on_builder_transaction(transaction_handle_type handle, string fee_asset)
                                    void set_password(string password)
                      signed_transaction set_voting_proxy(string account_to_modify, optional<string> voting_account, bool broadcast)
                      signed_transaction sign_builder_transaction(transaction_handle_type transaction_handle, bool broadcast)
                               memo_data sign_memo(string from, string to, string memo)
                          signature_type sign_string(string wif_key, const string & raw_string)
                      signed_transaction sign_transaction(signed_transaction tx, bool broadcast)
                          brain_key_info suggest_brain_key()
                      signed_transaction transfer(string from, string to, string amount, string asset_symbol, string memo, bool broadcast)
pair<transaction_id_type, signed_transaction> transfer2(string from, string to, string amount, string asset_symbol, string memo)
pair<graphene::chain::transaction_id_type, signed_transaction> transfer3(string from, string to, string amount, string asset_symbol, string memo, string fee_asset_symbol, bool broadcast)
                      blind_confirmation transfer_from_blind(string from_blind_account_key_or_label, string to_account_id_or_name, string amount, string asset_symbol, bool broadcast)
                                    void transfer_test(account_id_type from_account, account_id_type to_account, uint32_t times)
                      blind_confirmation transfer_to_blind(string from_account_id_or_name, string asset_symbol, vector<pair<string, string>> to_amounts, bool broadcast)
                                    void unlock(string password)
                      signed_transaction update_account_multisig(string account, string type, uint32_t weight_threshold, vector<string> account_auths, vector<weight_type> account_weights, string fee_symbol, bool broadcast)
                      signed_transaction update_account_multisig_keys(string account, string type, uint32_t weight_threshold, vector<public_key_type> key_auths, vector<weight_type> key_weights, string fee_symbol, bool broadcast)
                      signed_transaction update_asset(string symbol, optional<string> new_issuer, asset_options new_options, string fee_asset_symbol, bool broadcast)
                      signed_transaction update_witness(string witness_name, string url, string block_signing_key, string fee_asset_symbol, bool broadcast)
                      signed_transaction upgrade_account(string name, string asset_symbol, bool broadcast)
                      signed_transaction upgrade_account_datasource(string name, string auth_referrer, bool broadcast)
                      signed_transaction upgrade_account_merchant(string name, string auth_referrer, bool broadcast)
                      signed_transaction upgrade_data_transaction_member(string name, string auth_referrer, bool broadcast)
                                    bool verify_proxy_transfer_signature(const proxy_transfer_params & param, public_key_type pub_key)
                                    bool verify_transaction_signature(const signed_transaction & trx, public_key_type pub_key)
                      signed_transaction vote_for_committee_member(string voting_account, string committee_member, bool approve, bool broadcast)
                      signed_transaction vote_for_witness(string voting_account, string witness, bool approve, bool broadcast)
                      signed_transaction whitelist_account(string authorizing_account, string account_to_list, account_whitelist_operation::account_listing new_listing_status, bool broadcast)
                      signed_transaction withdraw_vesting(string witness_name, string amount, string asset_symbol, string fee_asset_symbol, bool broadcast)
